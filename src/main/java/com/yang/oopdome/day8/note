一、方法重写的规则是什么？
1.方法名相同
2.参数列表相同
3.返回值类型相同或者是其子类
4.访问权限不能严于父类
5.父类的静态方法不能被子类覆盖为非静态方法，父类的非静态方法不能被子类覆盖为静态方法
6.子类可以定义与父类同名的静态方法，以便在子类中隐藏父类的静态方法（注。静态方法中无法使用super）
7.父类的私有方法不能被子类覆盖
8.不能抛出比父类方法更多的异常
二、instanceof的作用是什么？
instanceof运算符是向下类型转过程中进行类型的判断
1.减少向下转型过程中，没有转换为真实子类类型的类型转换异常
2.使用instanceof时，对象的类型必须和instanceof后面的参数所指定的类在继承上有上下级关系

三、多态有何作用？
概念：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果，这就是多态性。简单的说:就是用父类的引用指向子类的对象。
1.避免频繁修改代码，提高代码可扩展性和可维护性。
2.同一引用类型，使用不同的实例而执行不同的操作。

四、如何实现多态？
变量不存在在多态，只有方法有多态。
关系上存在is-a或者has -a的关系（继承）
方法重写是实现多态的基础
1.使用父类作为方法的形象，是Java中实现和使用多态的主要方式
2.使用父类作为返回值类型，也是Java中实现和使用多态的主要方式